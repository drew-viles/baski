// Code generated by MockGen. DO NOT EDIT.
// Source: base.go
//
// Generated by this command:
//
//	mockgen -source=base.go -destination=../../mock/base.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVaultInterface is a mock of VaultInterface interface.
type MockVaultInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVaultInterfaceMockRecorder
}

// MockVaultInterfaceMockRecorder is the mock recorder for MockVaultInterface.
type MockVaultInterfaceMockRecorder struct {
	mock *MockVaultInterface
}

// NewMockVaultInterface creates a new mock instance.
func NewMockVaultInterface(ctrl *gomock.Controller) *MockVaultInterface {
	mock := &MockVaultInterface{ctrl: ctrl}
	mock.recorder = &MockVaultInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultInterface) EXPECT() *MockVaultInterfaceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockVaultInterface) Fetch(mountPath, secretPath, data string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", mountPath, secretPath, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockVaultInterfaceMockRecorder) Fetch(mountPath, secretPath, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockVaultInterface)(nil).Fetch), mountPath, secretPath, data)
}

// MockSSHInterface is a mock of SSHInterface interface.
type MockSSHInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSSHInterfaceMockRecorder
}

// MockSSHInterfaceMockRecorder is the mock recorder for MockSSHInterface.
type MockSSHInterfaceMockRecorder struct {
	mock *MockSSHInterface
}

// NewMockSSHInterface creates a new mock instance.
func NewMockSSHInterface(ctrl *gomock.Controller) *MockSSHInterface {
	mock := &MockSSHInterface{ctrl: ctrl}
	mock.recorder = &MockSSHInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHInterface) EXPECT() *MockSSHInterfaceMockRecorder {
	return m.recorder
}

// CopyFromRemoteServer mocks base method.
func (m *MockSSHInterface) CopyFromRemoteServer(src, dst string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFromRemoteServer", src, dst)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyFromRemoteServer indicates an expected call of CopyFromRemoteServer.
func (mr *MockSSHInterfaceMockRecorder) CopyFromRemoteServer(src, dst any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFromRemoteServer", reflect.TypeOf((*MockSSHInterface)(nil).CopyFromRemoteServer), src, dst)
}

// SFTPClose mocks base method.
func (m *MockSSHInterface) SFTPClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SFTPClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// SFTPClose indicates an expected call of SFTPClose.
func (mr *MockSSHInterfaceMockRecorder) SFTPClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SFTPClose", reflect.TypeOf((*MockSSHInterface)(nil).SFTPClose))
}

// SSHClose mocks base method.
func (m *MockSSHInterface) SSHClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// SSHClose indicates an expected call of SSHClose.
func (mr *MockSSHInterfaceMockRecorder) SSHClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHClose", reflect.TypeOf((*MockSSHInterface)(nil).SSHClose))
}

// MockS3Interface is a mock of S3Interface interface.
type MockS3Interface struct {
	ctrl     *gomock.Controller
	recorder *MockS3InterfaceMockRecorder
}

// MockS3InterfaceMockRecorder is the mock recorder for MockS3Interface.
type MockS3InterfaceMockRecorder struct {
	mock *MockS3Interface
}

// NewMockS3Interface creates a new mock instance.
func NewMockS3Interface(ctrl *gomock.Controller) *MockS3Interface {
	mock := &MockS3Interface{ctrl: ctrl}
	mock.recorder = &MockS3InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Interface) EXPECT() *MockS3InterfaceMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockS3Interface) Fetch(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockS3InterfaceMockRecorder) Fetch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockS3Interface)(nil).Fetch), arg0)
}

// List mocks base method.
func (m *MockS3Interface) List(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockS3InterfaceMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockS3Interface)(nil).List), arg0)
}

// Put mocks base method.
func (m *MockS3Interface) Put(key string, body *os.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockS3InterfaceMockRecorder) Put(key, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockS3Interface)(nil).Put), key, body)
}
